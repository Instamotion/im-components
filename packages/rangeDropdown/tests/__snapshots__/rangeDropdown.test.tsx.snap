// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RangeDropdown Input component renders correctly 1`] = `
<ThemeProvider
  theme={
    Object {
      "card": Object {
        "border": Object {
          "radius": 4,
        },
        "shadow": "0 0.25rem 0.25rem 0 rgba(0, 0, 0, 0.1)",
      },
      "color": Object {
        "brightGrey": "#606164",
        "downy": "#75DFC0",
        "flamePea": "#B75C50",
        "lightGrey": "#FAFAFA",
        "niagara": "#20AD90",
        "oil": "#313330",
        "parisDaisy": "#FFE44C",
        "silver": "#C4C4C4",
        "white": "#FFFFFF",
      },
      "font": Object {
        "sans": Object {
          "family": "Roboto, sans-serif",
        },
      },
      "footer": Object {
        "maxWidth": 1320,
      },
      "heading": Object {
        "l": Object {
          "size": 36,
        },
        "m": Object {
          "size": 32,
        },
        "s": Object {
          "size": 24,
        },
        "xl": Object {
          "size": 48,
        },
        "xs": Object {
          "size": 20,
        },
        "xxl": Object {
          "size": 60,
        },
        "xxs": Object {
          "size": 18,
        },
      },
      "input": Object {
        "border": Object {
          "color": "#C4C4C4",
          "width": 1,
        },
        "font": Object {
          "family": "Roboto, sans-serif",
          "size": 16,
        },
      },
      "label": Object {
        "font": Object {
          "family": "Roboto, sans-serif",
          "size": 1,
          "weight": 600,
        },
        "letter": Object {
          "spacing": 0.01,
        },
        "line": Object {
          "height": 1.15,
        },
      },
      "mediaQueries": Object {
        "whenDesktop": "@media (min-width: 1024px)",
        "whenDesktopXL": "@media (min-width: 1280px)",
        "whenMobileL": "@media (min-width: 320px)",
        "whenTablet": "@media (min-width: 768px)",
      },
      "name": "default",
      "table": Object {
        "body": Object {
          "background": "#FFFFFF",
          "font": Object {
            "family": "Roboto, sans-serif",
            "height": 28,
            "size": 12,
            "spacing": 0.4,
          },
        },
        "foot": Object {
          "background": "#FFFFFF",
          "font": Object {
            "family": "Roboto, sans-serif",
            "height": 28,
            "size": 12,
            "spacing": 0.4,
            "weight": 500,
          },
        },
        "head": Object {
          "background": "#FFFFFF",
          "font": Object {
            "family": "Roboto, sans-serif",
            "height": 28,
            "size": 12,
            "spacing": 0.4,
            "weight": 500,
          },
        },
        "innerBorder": Object {
          "color": "#C4C4C4",
          "radius": 0,
          "width": 1,
        },
        "outerBorder": Object {
          "color": "#C4C4C4",
          "radius": 4,
          "width": 2,
        },
      },
    }
  }
>
  <IntlProvider
    defaultFormats={Object {}}
    defaultLocale="en"
    formats={Object {}}
    locale="de"
    messages={Object {}}
    onError={[Function]}
    textComponent={Symbol(react.fragment)}
  >
    <Component
      id="dropdown-1"
      label="RangeDropdownMain"
      optionsFrom={
        Array [
          Object {
            "label": "from",
            "value": "from",
          },
          Object {
            "label": "100",
            "value": "100",
          },
          Object {
            "label": "200",
            "value": "200",
          },
          Object {
            "label": "300",
            "value": "300",
          },
        ]
      }
      optionsTo={
        Array [
          Object {
            "label": "to",
            "value": "to",
          },
          Object {
            "label": "100",
            "value": "100",
          },
          Object {
            "label": "200",
            "value": "200",
          },
          Object {
            "label": "300",
            "value": "300",
          },
        ]
      }
      placeholderFrom="from"
      placeholderTo="to"
    >
      <styled.div
        id="dropdown-1"
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-hSdWYo",
                "isStatic": false,
                "lastClassName": "bBCYTy",
                "rules": Array [
                  "
  display: flex;
  flex-direction: column;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-hSdWYo",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          id="dropdown-1"
        >
          <div
            className="sc-hSdWYo bBCYTy"
            id="dropdown-1"
          >
            <Label
              text="RangeDropdownMain"
            >
              <styled.label
                className="undefinedfalse"
                text="RangeDropdownMain"
              >
                <StyledComponent
                  className="undefinedfalse"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bdVaJa",
                        "isStatic": false,
                        "lastClassName": "dQXKHx",
                        "rules": Array [
                          "
  font-family: ",
                          "BentonSans",
                          ";
  font-weight: ",
                          "700",
                          ";
  line-height: 1.625rem;
  color: ",
                          "#575756",
                          ";
  font-size: 1rem;
  cursor: pointer;
  ",
                          [Function],
                          "
  ",
                          [Function],
                          "
  color: ",
                          [Function],
                          ";

  ",
                          [Function],
                          "
",
                        ],
                      },
                      "displayName": "styled.label",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bdVaJa",
                      "target": "label",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  text="RangeDropdownMain"
                >
                  <label
                    className="sc-bdVaJa dQXKHx undefinedfalse"
                  >
                    <span>
                      RangeDropdownMain
                    </span>
                  </label>
                </StyledComponent>
              </styled.label>
            </Label>
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-eHgmQL",
                      "isStatic": false,
                      "lastClassName": "kyGCoW",
                      "rules": Array [
                        "
  display: flex;
  justify-content: space-between;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-eHgmQL",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-eHgmQL kyGCoW"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-iAyFgw",
                            "isStatic": false,
                            "lastClassName": "jcdmNm",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: column;
  width: 48%;
  height: 100%;
  position: relative;

  ",
                              ".sc-kkGfuU",
                              " {
    position: absolute;
    z-index: 1;
    width: calc(100% - 2.5rem);
    & > input {
      -moz-appearance: textfield;
      &::placeholder {
        color: ",
                              "#313330",
                              ";
      }
      &::-webkit-inner-spin-button,
      &::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
      }
    }
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-iAyFgw",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-iAyFgw jcdmNm"
                      >
                        <Component
                          aria-label="input-from"
                          id="from-input-dropdown-1"
                          onBlur={[Function]}
                          onChange={[Function]}
                          placeholder="from"
                          type="number"
                          value="from"
                        >
                          <Component
                            aria-label="input-from"
                            id="from-input-dropdown-1"
                            onBlur={[Function]}
                            onChange={[Function]}
                            placeholder="from"
                            type="number"
                            value="from"
                          >
                            <styled.div
                              style={
                                Object {
                                  "width": undefined,
                                }
                              }
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-kkGfuU",
                                      "isStatic": false,
                                      "lastClassName": "gAvEoU",
                                      "rules": Array [
                                        "
  display: flex;
  flex-flow: column;
  width: 100%;
  margin-bottom: 1rem;
  ",
                                        ".sc-dxgOiQ",
                                        " {
    order: 1;
  }
  ",
                                        ".sc-ckVGcZ",
                                        " {
    order: 2;
  }
  ",
                                        ".sc-hMqMXs",
                                        " {
    order: 3;
  }
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-kkGfuU",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                style={
                                  Object {
                                    "width": undefined,
                                  }
                                }
                              >
                                <div
                                  className="sc-kkGfuU gAvEoU"
                                  style={
                                    Object {
                                      "width": undefined,
                                    }
                                  }
                                >
                                  <styled.div
                                    error={false}
                                    isFloatLabel={false}
                                    isPhone={false}
                                    value="from"
                                  >
                                    <StyledComponent
                                      error={false}
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ckVGcZ",
                                            "isStatic": false,
                                            "lastClassName": "bEXwXR",
                                            "rules": Array [
                                              "
  position: relative;
  display: flex;
  align-items: center;
  background-color: ",
                                              "#f3f3f3",
                                              ";
  border-radius: 6px;
  font-family: ",
                                              "BentonSans",
                                              ";
  font-weight: ",
                                              "400",
                                              ";
  font-size: ",
                                              "16",
                                              "px;
  padding: 0.687rem 0.625rem;
  color: ",
                                              "#363636",
                                              ";
  width: 100%;
  height: 3rem;
  box-sizing: border-box;
  margin: 0;
  border: 1px solid ",
                                              "#f3f3f3",
                                              "

  ",
                                              [Function],
                                              "

  ",
                                              [Function],
                                              "

  ",
                                              [Function],
                                              "

  ",
                                              [Function],
                                              "

  &:focus-within {
    ",
                                              [Function],
                                              "
      + label.floated {
        transform: translate(1rem, -0.6rem) scale(.75);
        color: ",
                                              "#F7B628",
                                              " !important;
        opacity: 1;
        display: inline;

        .asterisk {
          display: inline;
          color: ",
                                              "#F7B628",
                                              ";
        }
        .float-bg {
          display: block;
        }
      }
    }
  }

  ",
                                              "@media (min-width: 768px)",
                                              " {
    height: 3.125rem;
    padding: 0.812rem 1.375rem;
  }

  ",
                                              [Function],
                                              "
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-ckVGcZ",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      isFloatLabel={false}
                                      isPhone={false}
                                      value="from"
                                    >
                                      <div
                                        className="sc-ckVGcZ bEXwXR"
                                        value="from"
                                      >
                                        <styled.input
                                          id="from-input-dropdown-1"
                                          maxLength={30}
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          type="number"
                                          value="from"
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-jKJlTe",
                                                  "isStatic": false,
                                                  "lastClassName": "bqlyro",
                                                  "rules": Array [
                                                    "
  background-color: transparent;
  border: none;
  font-family: inherit;
  font-size: inherit;
  color: inherit;
  height: inherit;
  width: 100%;
  padding: 0;
  ",
                                                    [Function],
                                                    "
    :focus {
    outline: none;
  }
",
                                                  ],
                                                },
                                                "displayName": "styled.input",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-jKJlTe",
                                                "target": "input",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            id="from-input-dropdown-1"
                                            maxLength={30}
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            type="number"
                                            value="from"
                                          >
                                            <input
                                              className="sc-jKJlTe bqlyro"
                                              id="from-input-dropdown-1"
                                              maxLength={30}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              type="number"
                                              value="from"
                                            />
                                          </StyledComponent>
                                        </styled.input>
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-kEYyzF",
                                                  "isStatic": false,
                                                  "lastClassName": "fHvDrR",
                                                  "rules": Array [
                                                    "
  display: flex;
  flex: 1;
  z-index: 1;
  align-items: center;
  justify-content: center;
  height: inherit;
  width: 2rem;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-kEYyzF",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-kEYyzF fHvDrR"
                                            >
                                              <Styled(Component)
                                                className="times-icon"
                                                color="brightGrey"
                                                icon="times"
                                                onClick={[Function]}
                                              >
                                                <StyledComponent
                                                  className="times-icon"
                                                  color="brightGrey"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-eNQAEJ",
                                                        "isStatic": false,
                                                        "lastClassName": "gREKmg",
                                                        "rules": Array [
                                                          "
  cursor: pointer;
  color: ",
                                                          "#444444",
                                                          ";
",
                                                        ],
                                                      },
                                                      "displayName": "Styled(Component)",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-eNQAEJ",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  icon="times"
                                                  onClick={[Function]}
                                                >
                                                  <Component
                                                    className="sc-eNQAEJ gREKmg times-icon"
                                                    color="brightGrey"
                                                    icon="times"
                                                    onClick={[Function]}
                                                  >
                                                    <times
                                                      className="sc-eNQAEJ gREKmg times-icon"
                                                      color="brightGrey"
                                                      onClick={[Function]}
                                                    >
                                                      <styled.svg
                                                        className="sc-eNQAEJ gREKmg times-icon"
                                                        color="brightGrey"
                                                        onClick={[Function]}
                                                        viewBox="0 0 320 512"
                                                        xmlns="http://www.w3.org/2000/svg"
                                                      >
                                                        <StyledComponent
                                                          className="sc-eNQAEJ gREKmg times-icon"
                                                          color="brightGrey"
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-dnqmqq",
                                                                "isStatic": false,
                                                                "lastClassName": "dTNjgO",
                                                                "rules": Array [
                                                                  "
  display: inline-block;
  height: 1em;
  ",
                                                                  [Function],
                                                                  "
  ",
                                                                  [Function],
                                                                  "
",
                                                                ],
                                                              },
                                                              "displayName": "styled.svg",
                                                              "foldedComponentIds": Array [],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-dnqmqq",
                                                              "target": "svg",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                          onClick={[Function]}
                                                          viewBox="0 0 320 512"
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <svg
                                                            className="sc-dnqmqq dTNjgO sc-eNQAEJ gREKmg times-icon"
                                                            color="brightGrey"
                                                            onClick={[Function]}
                                                            viewBox="0 0 320 512"
                                                            xmlns="http://www.w3.org/2000/svg"
                                                          >
                                                            <path
                                                              d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                                              fill="currentColor"
                                                            />
                                                          </svg>
                                                        </StyledComponent>
                                                      </styled.svg>
                                                    </times>
                                                  </Component>
                                                </StyledComponent>
                                              </Styled(Component)>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </Component>
                        </Component>
                        <Component
                          id="from-dropdown-dropdown-1"
                          onChange={[Function]}
                          options={
                            Array [
                              Object {
                                "label": "from",
                                "value": "from",
                              },
                              Object {
                                "label": "100",
                                "value": "100",
                              },
                              Object {
                                "label": "200",
                                "value": "200",
                              },
                              Object {
                                "label": "300",
                                "value": "300",
                              },
                            ]
                          }
                          value="from"
                        >
                          <styled.span
                            style={
                              Object {
                                "width": undefined,
                              }
                            }
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-htoDjs",
                                    "isStatic": false,
                                    "lastClassName": "kESFyj",
                                    "rules": Array [
                                      "
  display: flex;
  flex-flow: column;
  width: 100%;
  margin-bottom: 2rem;

  ",
                                      ".sc-ifAKCX",
                                      " {
    order: 1;
  }
  ",
                                      ".sc-bZQynM",
                                      " {
    order: 2;
  }
  ",
                                      ".sc-bxivhb",
                                      " {
    order: 3;
  }

  label.floated {
    transform: translate(1rem, -0.6rem) scale(0.75);
    opacity: 1;
    display: inline;

    .asterisk {
      display: inline;
    }
    .float-bg {
      display: block;
    }
  }
",
                                    ],
                                  },
                                  "displayName": "styled.span",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-htoDjs",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              style={
                                Object {
                                  "width": undefined,
                                }
                              }
                            >
                              <span
                                className="sc-htoDjs kESFyj"
                                style={
                                  Object {
                                    "width": undefined,
                                  }
                                }
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bZQynM",
                                          "isStatic": false,
                                          "lastClassName": "iMWVsx",
                                          "rules": Array [
                                            "
  position: relative;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-bZQynM",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-bZQynM iMWVsx"
                                    >
                                      <styled.select
                                        aria-label="from-dropdown-dropdown-1"
                                        disabled={false}
                                        error={false}
                                        id="from-dropdown-dropdown-1"
                                        onChange={[Function]}
                                        value="from"
                                      >
                                        <StyledComponent
                                          aria-label="from-dropdown-dropdown-1"
                                          disabled={false}
                                          error={false}
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-gzVnrw",
                                                "isStatic": false,
                                                "lastClassName": "eGEqPu",
                                                "rules": Array [
                                                  "
  appearance: none;
  box-sizing: border-box;
  cursor: pointer;
  border-radius: 6px;
  font-family: ",
                                                  "BentonSans",
                                                  ";
  font-weight: ",
                                                  "400",
                                                  ";
  font-size: 1rem;
  background-color: ",
                                                  "#f3f3f3",
                                                  ";
  color: ",
                                                  "#575756",
                                                  ";
  border: ",
                                                  "1",
                                                  "px solid transparent;
  width: 100%;
  height: 3rem;
  padding: 0.687rem 0.625rem;
  margin: 0;
  outline: 0;

  ",
                                                  [Function],
                                                  "

  ",
                                                  "@media (min-width: 768px)",
                                                  " {
    height: 3.125rem;
    padding: 0.812rem 1.375rem;
  }

  ",
                                                  [Function],
                                                  "
  ",
                                                  [Function],
                                                  "

  &:focus {
    border: ",
                                                  "1",
                                                  "px solid ",
                                                  "#F7B628",
                                                  ";
  }

  &.touched:invalid {
    border: ",
                                                  "1",
                                                  "px solid ",
                                                  "#FF0000",
                                                  ";
  }
",
                                                ],
                                              },
                                              "displayName": "styled.select",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-gzVnrw",
                                              "target": "select",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          id="from-dropdown-dropdown-1"
                                          onChange={[Function]}
                                          value="from"
                                        >
                                          <select
                                            aria-label="from-dropdown-dropdown-1"
                                            className="sc-gzVnrw eGEqPu"
                                            disabled={false}
                                            id="from-dropdown-dropdown-1"
                                            onChange={[Function]}
                                            value="from"
                                          >
                                            <FormattedMessage
                                              id="from"
                                              key="from"
                                              values={Object {}}
                                            >
                                              <option
                                                key="from"
                                                value="from"
                                              >
                                                from
                                              </option>
                                            </FormattedMessage>
                                            <FormattedMessage
                                              id="100"
                                              key="100"
                                              values={Object {}}
                                            >
                                              <option
                                                key="100"
                                                value="100"
                                              >
                                                100
                                              </option>
                                            </FormattedMessage>
                                            <FormattedMessage
                                              id="200"
                                              key="200"
                                              values={Object {}}
                                            >
                                              <option
                                                key="200"
                                                value="200"
                                              >
                                                200
                                              </option>
                                            </FormattedMessage>
                                            <FormattedMessage
                                              id="300"
                                              key="300"
                                              values={Object {}}
                                            >
                                              <option
                                                key="300"
                                                value="300"
                                              >
                                                300
                                              </option>
                                            </FormattedMessage>
                                          </select>
                                        </StyledComponent>
                                      </styled.select>
                                      <styled.span>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-EHOje",
                                                "isStatic": false,
                                                "lastClassName": "kYEDXd",
                                                "rules": Array [
                                                  "
  display: block;
  position: absolute;
  pointer-events: none;
  right: 0.75rem;
  top: 25%;
  color: ",
                                                  "#444444",
                                                  ";
  &::before {
    content: '';
    width: 0.0625rem;
    height: 0.5rem;
    position: absolute;
    transform: rotate(-45deg);
    top: 0.5rem;
    right: 0.7rem;
    background-color: ",
                                                  "#444444",
                                                  ";
  }
  &::after {
    content: '';
    width: 0.0625rem;
    height: 0.5rem;
    position: absolute;
    transform: rotate(45deg);
    top: 0.5rem;
    right: 0.35rem;
    background-color: ",
                                                  "#444444",
                                                  ";
  }
",
                                                ],
                                              },
                                              "displayName": "styled.span",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-EHOje",
                                              "target": "span",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <span
                                            className="sc-EHOje kYEDXd"
                                          />
                                        </StyledComponent>
                                      </styled.span>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </span>
                            </StyledComponent>
                          </styled.span>
                        </Component>
                      </div>
                    </StyledComponent>
                  </styled.div>
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-iAyFgw",
                            "isStatic": false,
                            "lastClassName": "jcdmNm",
                            "rules": Array [
                              "
  display: flex;
  flex-direction: column;
  width: 48%;
  height: 100%;
  position: relative;

  ",
                              ".sc-kkGfuU",
                              " {
    position: absolute;
    z-index: 1;
    width: calc(100% - 2.5rem);
    & > input {
      -moz-appearance: textfield;
      &::placeholder {
        color: ",
                              "#313330",
                              ";
      }
      &::-webkit-inner-spin-button,
      &::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
      }
    }
  }
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-iAyFgw",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-iAyFgw jcdmNm"
                      >
                        <Component
                          aria-label="input-to"
                          id="to-input-dropdown-1"
                          onBlur={[Function]}
                          onChange={[Function]}
                          placeholder="to"
                          type="number"
                          value="to"
                        >
                          <Component
                            aria-label="input-to"
                            id="to-input-dropdown-1"
                            onBlur={[Function]}
                            onChange={[Function]}
                            placeholder="to"
                            type="number"
                            value="to"
                          >
                            <styled.div
                              style={
                                Object {
                                  "width": undefined,
                                }
                              }
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-kkGfuU",
                                      "isStatic": false,
                                      "lastClassName": "gAvEoU",
                                      "rules": Array [
                                        "
  display: flex;
  flex-flow: column;
  width: 100%;
  margin-bottom: 1rem;
  ",
                                        ".sc-dxgOiQ",
                                        " {
    order: 1;
  }
  ",
                                        ".sc-ckVGcZ",
                                        " {
    order: 2;
  }
  ",
                                        ".sc-hMqMXs",
                                        " {
    order: 3;
  }
",
                                      ],
                                    },
                                    "displayName": "styled.div",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-kkGfuU",
                                    "target": "div",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                style={
                                  Object {
                                    "width": undefined,
                                  }
                                }
                              >
                                <div
                                  className="sc-kkGfuU gAvEoU"
                                  style={
                                    Object {
                                      "width": undefined,
                                    }
                                  }
                                >
                                  <styled.div
                                    error={false}
                                    isFloatLabel={false}
                                    isPhone={false}
                                    value="to"
                                  >
                                    <StyledComponent
                                      error={false}
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-ckVGcZ",
                                            "isStatic": false,
                                            "lastClassName": "bEXwXR",
                                            "rules": Array [
                                              "
  position: relative;
  display: flex;
  align-items: center;
  background-color: ",
                                              "#f3f3f3",
                                              ";
  border-radius: 6px;
  font-family: ",
                                              "BentonSans",
                                              ";
  font-weight: ",
                                              "400",
                                              ";
  font-size: ",
                                              "16",
                                              "px;
  padding: 0.687rem 0.625rem;
  color: ",
                                              "#363636",
                                              ";
  width: 100%;
  height: 3rem;
  box-sizing: border-box;
  margin: 0;
  border: 1px solid ",
                                              "#f3f3f3",
                                              "

  ",
                                              [Function],
                                              "

  ",
                                              [Function],
                                              "

  ",
                                              [Function],
                                              "

  ",
                                              [Function],
                                              "

  &:focus-within {
    ",
                                              [Function],
                                              "
      + label.floated {
        transform: translate(1rem, -0.6rem) scale(.75);
        color: ",
                                              "#F7B628",
                                              " !important;
        opacity: 1;
        display: inline;

        .asterisk {
          display: inline;
          color: ",
                                              "#F7B628",
                                              ";
        }
        .float-bg {
          display: block;
        }
      }
    }
  }

  ",
                                              "@media (min-width: 768px)",
                                              " {
    height: 3.125rem;
    padding: 0.812rem 1.375rem;
  }

  ",
                                              [Function],
                                              "
",
                                            ],
                                          },
                                          "displayName": "styled.div",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "sc-ckVGcZ",
                                          "target": "div",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      isFloatLabel={false}
                                      isPhone={false}
                                      value="to"
                                    >
                                      <div
                                        className="sc-ckVGcZ bEXwXR"
                                        value="to"
                                      >
                                        <styled.input
                                          id="to-input-dropdown-1"
                                          maxLength={30}
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          type="number"
                                          value="to"
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-jKJlTe",
                                                  "isStatic": false,
                                                  "lastClassName": "bqlyro",
                                                  "rules": Array [
                                                    "
  background-color: transparent;
  border: none;
  font-family: inherit;
  font-size: inherit;
  color: inherit;
  height: inherit;
  width: 100%;
  padding: 0;
  ",
                                                    [Function],
                                                    "
    :focus {
    outline: none;
  }
",
                                                  ],
                                                },
                                                "displayName": "styled.input",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-jKJlTe",
                                                "target": "input",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            id="to-input-dropdown-1"
                                            maxLength={30}
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            type="number"
                                            value="to"
                                          >
                                            <input
                                              className="sc-jKJlTe bqlyro"
                                              id="to-input-dropdown-1"
                                              maxLength={30}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              type="number"
                                              value="to"
                                            />
                                          </StyledComponent>
                                        </styled.input>
                                        <styled.div>
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-kEYyzF",
                                                  "isStatic": false,
                                                  "lastClassName": "fHvDrR",
                                                  "rules": Array [
                                                    "
  display: flex;
  flex: 1;
  z-index: 1;
  align-items: center;
  justify-content: center;
  height: inherit;
  width: 2rem;
",
                                                  ],
                                                },
                                                "displayName": "styled.div",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-kEYyzF",
                                                "target": "div",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                          >
                                            <div
                                              className="sc-kEYyzF fHvDrR"
                                            >
                                              <Styled(Component)
                                                className="times-icon"
                                                color="brightGrey"
                                                icon="times"
                                                onClick={[Function]}
                                              >
                                                <StyledComponent
                                                  className="times-icon"
                                                  color="brightGrey"
                                                  forwardedComponent={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "attrs": Array [],
                                                      "componentStyle": ComponentStyle {
                                                        "componentId": "sc-eNQAEJ",
                                                        "isStatic": false,
                                                        "lastClassName": "gREKmg",
                                                        "rules": Array [
                                                          "
  cursor: pointer;
  color: ",
                                                          "#444444",
                                                          ";
",
                                                        ],
                                                      },
                                                      "displayName": "Styled(Component)",
                                                      "foldedComponentIds": Array [],
                                                      "render": [Function],
                                                      "styledComponentId": "sc-eNQAEJ",
                                                      "target": [Function],
                                                      "toString": [Function],
                                                      "warnTooManyClasses": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  forwardedRef={null}
                                                  icon="times"
                                                  onClick={[Function]}
                                                >
                                                  <Component
                                                    className="sc-eNQAEJ gREKmg times-icon"
                                                    color="brightGrey"
                                                    icon="times"
                                                    onClick={[Function]}
                                                  >
                                                    <times
                                                      className="sc-eNQAEJ gREKmg times-icon"
                                                      color="brightGrey"
                                                      onClick={[Function]}
                                                    >
                                                      <styled.svg
                                                        className="sc-eNQAEJ gREKmg times-icon"
                                                        color="brightGrey"
                                                        onClick={[Function]}
                                                        viewBox="0 0 320 512"
                                                        xmlns="http://www.w3.org/2000/svg"
                                                      >
                                                        <StyledComponent
                                                          className="sc-eNQAEJ gREKmg times-icon"
                                                          color="brightGrey"
                                                          forwardedComponent={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "attrs": Array [],
                                                              "componentStyle": ComponentStyle {
                                                                "componentId": "sc-dnqmqq",
                                                                "isStatic": false,
                                                                "lastClassName": "dTNjgO",
                                                                "rules": Array [
                                                                  "
  display: inline-block;
  height: 1em;
  ",
                                                                  [Function],
                                                                  "
  ",
                                                                  [Function],
                                                                  "
",
                                                                ],
                                                              },
                                                              "displayName": "styled.svg",
                                                              "foldedComponentIds": Array [],
                                                              "render": [Function],
                                                              "styledComponentId": "sc-dnqmqq",
                                                              "target": "svg",
                                                              "toString": [Function],
                                                              "warnTooManyClasses": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          forwardedRef={null}
                                                          onClick={[Function]}
                                                          viewBox="0 0 320 512"
                                                          xmlns="http://www.w3.org/2000/svg"
                                                        >
                                                          <svg
                                                            className="sc-dnqmqq dTNjgO sc-eNQAEJ gREKmg times-icon"
                                                            color="brightGrey"
                                                            onClick={[Function]}
                                                            viewBox="0 0 320 512"
                                                            xmlns="http://www.w3.org/2000/svg"
                                                          >
                                                            <path
                                                              d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                                              fill="currentColor"
                                                            />
                                                          </svg>
                                                        </StyledComponent>
                                                      </styled.svg>
                                                    </times>
                                                  </Component>
                                                </StyledComponent>
                                              </Styled(Component)>
                                            </div>
                                          </StyledComponent>
                                        </styled.div>
                                      </div>
                                    </StyledComponent>
                                  </styled.div>
                                </div>
                              </StyledComponent>
                            </styled.div>
                          </Component>
                        </Component>
                        <Component
                          id="from-dropdown-dropdown-1"
                          onChange={[Function]}
                          options={
                            Array [
                              Object {
                                "label": "to",
                                "value": "to",
                              },
                              Object {
                                "label": "100",
                                "value": "100",
                              },
                              Object {
                                "label": "200",
                                "value": "200",
                              },
                              Object {
                                "label": "300",
                                "value": "300",
                              },
                            ]
                          }
                          value="to"
                        >
                          <styled.span
                            style={
                              Object {
                                "width": undefined,
                              }
                            }
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-htoDjs",
                                    "isStatic": false,
                                    "lastClassName": "kESFyj",
                                    "rules": Array [
                                      "
  display: flex;
  flex-flow: column;
  width: 100%;
  margin-bottom: 2rem;

  ",
                                      ".sc-ifAKCX",
                                      " {
    order: 1;
  }
  ",
                                      ".sc-bZQynM",
                                      " {
    order: 2;
  }
  ",
                                      ".sc-bxivhb",
                                      " {
    order: 3;
  }

  label.floated {
    transform: translate(1rem, -0.6rem) scale(0.75);
    opacity: 1;
    display: inline;

    .asterisk {
      display: inline;
    }
    .float-bg {
      display: block;
    }
  }
",
                                    ],
                                  },
                                  "displayName": "styled.span",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-htoDjs",
                                  "target": "span",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              style={
                                Object {
                                  "width": undefined,
                                }
                              }
                            >
                              <span
                                className="sc-htoDjs kESFyj"
                                style={
                                  Object {
                                    "width": undefined,
                                  }
                                }
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-bZQynM",
                                          "isStatic": false,
                                          "lastClassName": "iMWVsx",
                                          "rules": Array [
                                            "
  position: relative;
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-bZQynM",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-bZQynM iMWVsx"
                                    >
                                      <styled.select
                                        aria-label="from-dropdown-dropdown-1"
                                        disabled={false}
                                        error={false}
                                        id="from-dropdown-dropdown-1"
                                        onChange={[Function]}
                                        value="to"
                                      >
                                        <StyledComponent
                                          aria-label="from-dropdown-dropdown-1"
                                          disabled={false}
                                          error={false}
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-gzVnrw",
                                                "isStatic": false,
                                                "lastClassName": "eGEqPu",
                                                "rules": Array [
                                                  "
  appearance: none;
  box-sizing: border-box;
  cursor: pointer;
  border-radius: 6px;
  font-family: ",
                                                  "BentonSans",
                                                  ";
  font-weight: ",
                                                  "400",
                                                  ";
  font-size: 1rem;
  background-color: ",
                                                  "#f3f3f3",
                                                  ";
  color: ",
                                                  "#575756",
                                                  ";
  border: ",
                                                  "1",
                                                  "px solid transparent;
  width: 100%;
  height: 3rem;
  padding: 0.687rem 0.625rem;
  margin: 0;
  outline: 0;

  ",
                                                  [Function],
                                                  "

  ",
                                                  "@media (min-width: 768px)",
                                                  " {
    height: 3.125rem;
    padding: 0.812rem 1.375rem;
  }

  ",
                                                  [Function],
                                                  "
  ",
                                                  [Function],
                                                  "

  &:focus {
    border: ",
                                                  "1",
                                                  "px solid ",
                                                  "#F7B628",
                                                  ";
  }

  &.touched:invalid {
    border: ",
                                                  "1",
                                                  "px solid ",
                                                  "#FF0000",
                                                  ";
  }
",
                                                ],
                                              },
                                              "displayName": "styled.select",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-gzVnrw",
                                              "target": "select",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                          id="from-dropdown-dropdown-1"
                                          onChange={[Function]}
                                          value="to"
                                        >
                                          <select
                                            aria-label="from-dropdown-dropdown-1"
                                            className="sc-gzVnrw eGEqPu"
                                            disabled={false}
                                            id="from-dropdown-dropdown-1"
                                            onChange={[Function]}
                                            value="to"
                                          >
                                            <FormattedMessage
                                              id="to"
                                              key="to"
                                              values={Object {}}
                                            >
                                              <option
                                                key="to"
                                                value="to"
                                              >
                                                to
                                              </option>
                                            </FormattedMessage>
                                            <FormattedMessage
                                              id="100"
                                              key="100"
                                              values={Object {}}
                                            >
                                              <option
                                                key="100"
                                                value="100"
                                              >
                                                100
                                              </option>
                                            </FormattedMessage>
                                            <FormattedMessage
                                              id="200"
                                              key="200"
                                              values={Object {}}
                                            >
                                              <option
                                                key="200"
                                                value="200"
                                              >
                                                200
                                              </option>
                                            </FormattedMessage>
                                            <FormattedMessage
                                              id="300"
                                              key="300"
                                              values={Object {}}
                                            >
                                              <option
                                                key="300"
                                                value="300"
                                              >
                                                300
                                              </option>
                                            </FormattedMessage>
                                          </select>
                                        </StyledComponent>
                                      </styled.select>
                                      <styled.span>
                                        <StyledComponent
                                          forwardedComponent={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "attrs": Array [],
                                              "componentStyle": ComponentStyle {
                                                "componentId": "sc-EHOje",
                                                "isStatic": false,
                                                "lastClassName": "kYEDXd",
                                                "rules": Array [
                                                  "
  display: block;
  position: absolute;
  pointer-events: none;
  right: 0.75rem;
  top: 25%;
  color: ",
                                                  "#444444",
                                                  ";
  &::before {
    content: '';
    width: 0.0625rem;
    height: 0.5rem;
    position: absolute;
    transform: rotate(-45deg);
    top: 0.5rem;
    right: 0.7rem;
    background-color: ",
                                                  "#444444",
                                                  ";
  }
  &::after {
    content: '';
    width: 0.0625rem;
    height: 0.5rem;
    position: absolute;
    transform: rotate(45deg);
    top: 0.5rem;
    right: 0.35rem;
    background-color: ",
                                                  "#444444",
                                                  ";
  }
",
                                                ],
                                              },
                                              "displayName": "styled.span",
                                              "foldedComponentIds": Array [],
                                              "render": [Function],
                                              "styledComponentId": "sc-EHOje",
                                              "target": "span",
                                              "toString": [Function],
                                              "warnTooManyClasses": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          forwardedRef={null}
                                        >
                                          <span
                                            className="sc-EHOje kYEDXd"
                                          />
                                        </StyledComponent>
                                      </styled.span>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                              </span>
                            </StyledComponent>
                          </styled.span>
                        </Component>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </div>
              </StyledComponent>
            </styled.div>
          </div>
        </StyledComponent>
      </styled.div>
    </Component>
  </IntlProvider>
</ThemeProvider>
`;

exports[`RangeDropdown Input renderSelector renders 1`] = `
<ThemeProvider
  theme={
    Object {
      "card": Object {
        "border": Object {
          "radius": 4,
        },
        "shadow": "0 0.25rem 0.25rem 0 rgba(0, 0, 0, 0.1)",
      },
      "color": Object {
        "brightGrey": "#606164",
        "downy": "#75DFC0",
        "flamePea": "#B75C50",
        "lightGrey": "#FAFAFA",
        "niagara": "#20AD90",
        "oil": "#313330",
        "parisDaisy": "#FFE44C",
        "silver": "#C4C4C4",
        "white": "#FFFFFF",
      },
      "font": Object {
        "sans": Object {
          "family": "Roboto, sans-serif",
        },
      },
      "footer": Object {
        "maxWidth": 1320,
      },
      "heading": Object {
        "l": Object {
          "size": 36,
        },
        "m": Object {
          "size": 32,
        },
        "s": Object {
          "size": 24,
        },
        "xl": Object {
          "size": 48,
        },
        "xs": Object {
          "size": 20,
        },
        "xxl": Object {
          "size": 60,
        },
        "xxs": Object {
          "size": 18,
        },
      },
      "input": Object {
        "border": Object {
          "color": "#C4C4C4",
          "width": 1,
        },
        "font": Object {
          "family": "Roboto, sans-serif",
          "size": 16,
        },
      },
      "label": Object {
        "font": Object {
          "family": "Roboto, sans-serif",
          "size": 1,
          "weight": 600,
        },
        "letter": Object {
          "spacing": 0.01,
        },
        "line": Object {
          "height": 1.15,
        },
      },
      "mediaQueries": Object {
        "whenDesktop": "@media (min-width: 1024px)",
        "whenDesktopXL": "@media (min-width: 1280px)",
        "whenMobileL": "@media (min-width: 320px)",
        "whenTablet": "@media (min-width: 768px)",
      },
      "name": "default",
      "table": Object {
        "body": Object {
          "background": "#FFFFFF",
          "font": Object {
            "family": "Roboto, sans-serif",
            "height": 28,
            "size": 12,
            "spacing": 0.4,
          },
        },
        "foot": Object {
          "background": "#FFFFFF",
          "font": Object {
            "family": "Roboto, sans-serif",
            "height": 28,
            "size": 12,
            "spacing": 0.4,
            "weight": 500,
          },
        },
        "head": Object {
          "background": "#FFFFFF",
          "font": Object {
            "family": "Roboto, sans-serif",
            "height": 28,
            "size": 12,
            "spacing": 0.4,
            "weight": 500,
          },
        },
        "innerBorder": Object {
          "color": "#C4C4C4",
          "radius": 0,
          "width": 1,
        },
        "outerBorder": Object {
          "color": "#C4C4C4",
          "radius": 4,
          "width": 2,
        },
      },
    }
  }
>
  <IntlProvider
    defaultFormats={Object {}}
    defaultLocale="en"
    formats={Object {}}
    locale="de"
    messages={Object {}}
    onError={[Function]}
    textComponent={Symbol(react.fragment)}
  >
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-iAyFgw",
              "isStatic": false,
              "lastClassName": "jcdmNm",
              "rules": Array [
                "
  display: flex;
  flex-direction: column;
  width: 48%;
  height: 100%;
  position: relative;

  ",
                ".sc-kkGfuU",
                " {
    position: absolute;
    z-index: 1;
    width: calc(100% - 2.5rem);
    & > input {
      -moz-appearance: textfield;
      &::placeholder {
        color: ",
                "#313330",
                ";
      }
      &::-webkit-inner-spin-button,
      &::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
      }
    }
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-iAyFgw",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-iAyFgw jcdmNm"
        >
          <Component
            aria-label="input-from"
            id="from-input-test-1"
            onBlur={[Function]}
            onChange={[Function]}
            placeholder="from"
            type="number"
            value={1}
          >
            <Component
              aria-label="input-from"
              id="from-input-test-1"
              onBlur={[Function]}
              onChange={[Function]}
              placeholder="from"
              type="number"
              value={1}
            >
              <styled.div
                style={
                  Object {
                    "width": undefined,
                  }
                }
              >
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-kkGfuU",
                        "isStatic": false,
                        "lastClassName": "gAvEoU",
                        "rules": Array [
                          "
  display: flex;
  flex-flow: column;
  width: 100%;
  margin-bottom: 1rem;
  ",
                          ".sc-dxgOiQ",
                          " {
    order: 1;
  }
  ",
                          ".sc-ckVGcZ",
                          " {
    order: 2;
  }
  ",
                          ".sc-hMqMXs",
                          " {
    order: 3;
  }
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-kkGfuU",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  style={
                    Object {
                      "width": undefined,
                    }
                  }
                >
                  <div
                    className="sc-kkGfuU gAvEoU"
                    style={
                      Object {
                        "width": undefined,
                      }
                    }
                  >
                    <styled.div
                      error={false}
                      isFloatLabel={false}
                      isPhone={false}
                      value={1}
                    >
                      <StyledComponent
                        error={false}
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-ckVGcZ",
                              "isStatic": false,
                              "lastClassName": "bEXwXR",
                              "rules": Array [
                                "
  position: relative;
  display: flex;
  align-items: center;
  background-color: ",
                                "#f3f3f3",
                                ";
  border-radius: 6px;
  font-family: ",
                                "BentonSans",
                                ";
  font-weight: ",
                                "400",
                                ";
  font-size: ",
                                "16",
                                "px;
  padding: 0.687rem 0.625rem;
  color: ",
                                "#363636",
                                ";
  width: 100%;
  height: 3rem;
  box-sizing: border-box;
  margin: 0;
  border: 1px solid ",
                                "#f3f3f3",
                                "

  ",
                                [Function],
                                "

  ",
                                [Function],
                                "

  ",
                                [Function],
                                "

  ",
                                [Function],
                                "

  &:focus-within {
    ",
                                [Function],
                                "
      + label.floated {
        transform: translate(1rem, -0.6rem) scale(.75);
        color: ",
                                "#F7B628",
                                " !important;
        opacity: 1;
        display: inline;

        .asterisk {
          display: inline;
          color: ",
                                "#F7B628",
                                ";
        }
        .float-bg {
          display: block;
        }
      }
    }
  }

  ",
                                "@media (min-width: 768px)",
                                " {
    height: 3.125rem;
    padding: 0.812rem 1.375rem;
  }

  ",
                                [Function],
                                "
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-ckVGcZ",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                        isFloatLabel={false}
                        isPhone={false}
                        value={1}
                      >
                        <div
                          className="sc-ckVGcZ bEXwXR"
                          value={1}
                        >
                          <styled.input
                            id="from-input-test-1"
                            maxLength={30}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            type="number"
                            value={1}
                          >
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-jKJlTe",
                                    "isStatic": false,
                                    "lastClassName": "bqlyro",
                                    "rules": Array [
                                      "
  background-color: transparent;
  border: none;
  font-family: inherit;
  font-size: inherit;
  color: inherit;
  height: inherit;
  width: 100%;
  padding: 0;
  ",
                                      [Function],
                                      "
    :focus {
    outline: none;
  }
",
                                    ],
                                  },
                                  "displayName": "styled.input",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-jKJlTe",
                                  "target": "input",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                              id="from-input-test-1"
                              maxLength={30}
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              type="number"
                              value={1}
                            >
                              <input
                                className="sc-jKJlTe bqlyro"
                                id="from-input-test-1"
                                maxLength={30}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                type="number"
                                value={1}
                              />
                            </StyledComponent>
                          </styled.input>
                          <styled.div>
                            <StyledComponent
                              forwardedComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "componentStyle": ComponentStyle {
                                    "componentId": "sc-kEYyzF",
                                    "isStatic": false,
                                    "lastClassName": "fHvDrR",
                                    "rules": Array [
                                      "
  display: flex;
  flex: 1;
  z-index: 1;
  align-items: center;
  justify-content: center;
  height: inherit;
  width: 2rem;
",
                                    ],
                                  },
                                  "displayName": "styled.div",
                                  "foldedComponentIds": Array [],
                                  "render": [Function],
                                  "styledComponentId": "sc-kEYyzF",
                                  "target": "div",
                                  "toString": [Function],
                                  "warnTooManyClasses": [Function],
                                  "withComponent": [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <div
                                className="sc-kEYyzF fHvDrR"
                              >
                                <Styled(Component)
                                  className="times-icon"
                                  color="brightGrey"
                                  icon="times"
                                  onClick={[Function]}
                                >
                                  <StyledComponent
                                    className="times-icon"
                                    color="brightGrey"
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-eNQAEJ",
                                          "isStatic": false,
                                          "lastClassName": "gREKmg",
                                          "rules": Array [
                                            "
  cursor: pointer;
  color: ",
                                            "#444444",
                                            ";
",
                                          ],
                                        },
                                        "displayName": "Styled(Component)",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-eNQAEJ",
                                        "target": [Function],
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                    icon="times"
                                    onClick={[Function]}
                                  >
                                    <Component
                                      className="sc-eNQAEJ gREKmg times-icon"
                                      color="brightGrey"
                                      icon="times"
                                      onClick={[Function]}
                                    >
                                      <times
                                        className="sc-eNQAEJ gREKmg times-icon"
                                        color="brightGrey"
                                        onClick={[Function]}
                                      >
                                        <styled.svg
                                          className="sc-eNQAEJ gREKmg times-icon"
                                          color="brightGrey"
                                          onClick={[Function]}
                                          viewBox="0 0 320 512"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <StyledComponent
                                            className="sc-eNQAEJ gREKmg times-icon"
                                            color="brightGrey"
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "sc-dnqmqq",
                                                  "isStatic": false,
                                                  "lastClassName": "dTNjgO",
                                                  "rules": Array [
                                                    "
  display: inline-block;
  height: 1em;
  ",
                                                    [Function],
                                                    "
  ",
                                                    [Function],
                                                    "
",
                                                  ],
                                                },
                                                "displayName": "styled.svg",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "sc-dnqmqq",
                                                "target": "svg",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            onClick={[Function]}
                                            viewBox="0 0 320 512"
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <svg
                                              className="sc-dnqmqq dTNjgO sc-eNQAEJ gREKmg times-icon"
                                              color="brightGrey"
                                              onClick={[Function]}
                                              viewBox="0 0 320 512"
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                d="M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z"
                                                fill="currentColor"
                                              />
                                            </svg>
                                          </StyledComponent>
                                        </styled.svg>
                                      </times>
                                    </Component>
                                  </StyledComponent>
                                </Styled(Component)>
                              </div>
                            </StyledComponent>
                          </styled.div>
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </div>
                </StyledComponent>
              </styled.div>
            </Component>
          </Component>
          <Component
            id="from-dropdown-test-1"
            onChange={[Function]}
            options={
              Array [
                Object {
                  "label": "This is one",
                  "value": 1,
                },
              ]
            }
            value={1}
          >
            <styled.span
              style={
                Object {
                  "width": undefined,
                }
              }
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-htoDjs",
                      "isStatic": false,
                      "lastClassName": "kESFyj",
                      "rules": Array [
                        "
  display: flex;
  flex-flow: column;
  width: 100%;
  margin-bottom: 2rem;

  ",
                        ".sc-ifAKCX",
                        " {
    order: 1;
  }
  ",
                        ".sc-bZQynM",
                        " {
    order: 2;
  }
  ",
                        ".sc-bxivhb",
                        " {
    order: 3;
  }

  label.floated {
    transform: translate(1rem, -0.6rem) scale(0.75);
    opacity: 1;
    display: inline;

    .asterisk {
      display: inline;
    }
    .float-bg {
      display: block;
    }
  }
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-htoDjs",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                style={
                  Object {
                    "width": undefined,
                  }
                }
              >
                <span
                  className="sc-htoDjs kESFyj"
                  style={
                    Object {
                      "width": undefined,
                    }
                  }
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bZQynM",
                            "isStatic": false,
                            "lastClassName": "iMWVsx",
                            "rules": Array [
                              "
  position: relative;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bZQynM",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="sc-bZQynM iMWVsx"
                      >
                        <styled.select
                          aria-label="from-dropdown-test-1"
                          disabled={false}
                          error={false}
                          id="from-dropdown-test-1"
                          onChange={[Function]}
                          value={1}
                        >
                          <StyledComponent
                            aria-label="from-dropdown-test-1"
                            disabled={false}
                            error={false}
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-gzVnrw",
                                  "isStatic": false,
                                  "lastClassName": "eGEqPu",
                                  "rules": Array [
                                    "
  appearance: none;
  box-sizing: border-box;
  cursor: pointer;
  border-radius: 6px;
  font-family: ",
                                    "BentonSans",
                                    ";
  font-weight: ",
                                    "400",
                                    ";
  font-size: 1rem;
  background-color: ",
                                    "#f3f3f3",
                                    ";
  color: ",
                                    "#575756",
                                    ";
  border: ",
                                    "1",
                                    "px solid transparent;
  width: 100%;
  height: 3rem;
  padding: 0.687rem 0.625rem;
  margin: 0;
  outline: 0;

  ",
                                    [Function],
                                    "

  ",
                                    "@media (min-width: 768px)",
                                    " {
    height: 3.125rem;
    padding: 0.812rem 1.375rem;
  }

  ",
                                    [Function],
                                    "
  ",
                                    [Function],
                                    "

  &:focus {
    border: ",
                                    "1",
                                    "px solid ",
                                    "#F7B628",
                                    ";
  }

  &.touched:invalid {
    border: ",
                                    "1",
                                    "px solid ",
                                    "#FF0000",
                                    ";
  }
",
                                  ],
                                },
                                "displayName": "styled.select",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-gzVnrw",
                                "target": "select",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                            id="from-dropdown-test-1"
                            onChange={[Function]}
                            value={1}
                          >
                            <select
                              aria-label="from-dropdown-test-1"
                              className="sc-gzVnrw eGEqPu"
                              disabled={false}
                              id="from-dropdown-test-1"
                              onChange={[Function]}
                              value={1}
                            >
                              <FormattedMessage
                                id="This is one"
                                key="1"
                                values={Object {}}
                              >
                                <option
                                  key="1"
                                  value={1}
                                >
                                  This is one
                                </option>
                              </FormattedMessage>
                            </select>
                          </StyledComponent>
                        </styled.select>
                        <styled.span>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-EHOje",
                                  "isStatic": false,
                                  "lastClassName": "kYEDXd",
                                  "rules": Array [
                                    "
  display: block;
  position: absolute;
  pointer-events: none;
  right: 0.75rem;
  top: 25%;
  color: ",
                                    "#444444",
                                    ";
  &::before {
    content: '';
    width: 0.0625rem;
    height: 0.5rem;
    position: absolute;
    transform: rotate(-45deg);
    top: 0.5rem;
    right: 0.7rem;
    background-color: ",
                                    "#444444",
                                    ";
  }
  &::after {
    content: '';
    width: 0.0625rem;
    height: 0.5rem;
    position: absolute;
    transform: rotate(45deg);
    top: 0.5rem;
    right: 0.35rem;
    background-color: ",
                                    "#444444",
                                    ";
  }
",
                                  ],
                                },
                                "displayName": "styled.span",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-EHOje",
                                "target": "span",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <span
                              className="sc-EHOje kYEDXd"
                            />
                          </StyledComponent>
                        </styled.span>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </span>
              </StyledComponent>
            </styled.span>
          </Component>
        </div>
      </StyledComponent>
    </styled.div>
  </IntlProvider>
</ThemeProvider>
`;
